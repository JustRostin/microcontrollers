
Opdracht B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cba  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000985  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000584  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c9  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7d d0       	rcall	.+250    	; 0x1ae <main>
  b4:	98 c0       	rjmp	.+304    	; 0x1e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
void display_text(char *str){
	lcd_write_string(str);

}
void set_cursor(int position){
	lcd_write_command(0x80 | position);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x10>
  c8:	00 00       	nop
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_strobe_lcd_e+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_strobe_lcd_e+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <init_4bits_mode>:
  de:	cf 93       	push	r28
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
  e4:	15 ba       	out	0x15, r1	; 21
  e6:	c0 e2       	ldi	r28, 0x20	; 32
  e8:	c5 bb       	out	0x15, r28	; 21
  ea:	e6 df       	rcall	.-52     	; 0xb8 <lcd_strobe_lcd_e>
  ec:	c5 bb       	out	0x15, r28	; 21
  ee:	e4 df       	rcall	.-56     	; 0xb8 <lcd_strobe_lcd_e>
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	e1 df       	rcall	.-62     	; 0xb8 <lcd_strobe_lcd_e>
  f6:	15 ba       	out	0x15, r1	; 21
  f8:	df df       	rcall	.-66     	; 0xb8 <lcd_strobe_lcd_e>
  fa:	80 ef       	ldi	r24, 0xF0	; 240
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_strobe_lcd_e>
 100:	15 ba       	out	0x15, r1	; 21
 102:	da df       	rcall	.-76     	; 0xb8 <lcd_strobe_lcd_e>
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	85 bb       	out	0x15, r24	; 21
 108:	d7 df       	rcall	.-82     	; 0xb8 <lcd_strobe_lcd_e>
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <lcd_write_data>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	85 bb       	out	0x15, r24	; 21
 114:	85 b3       	in	r24, 0x15	; 21
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bb       	out	0x15, r24	; 21
 11a:	ce df       	rcall	.-100    	; 0xb8 <lcd_strobe_lcd_e>
 11c:	c2 95       	swap	r28
 11e:	c0 7f       	andi	r28, 0xF0	; 240
 120:	c5 bb       	out	0x15, r28	; 21
 122:	85 b3       	in	r24, 0x15	; 21
 124:	84 60       	ori	r24, 0x04	; 4
 126:	85 bb       	out	0x15, r24	; 21
 128:	c7 df       	rcall	.-114    	; 0xb8 <lcd_strobe_lcd_e>
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_write_string>:
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	8c 01       	movw	r16, r24
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	06 c0       	rjmp	.+12     	; 0x14a <lcd_write_string+0x1c>
 13e:	f8 01       	movw	r30, r16
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	80 81       	ld	r24, Z
 146:	e3 df       	rcall	.-58     	; 0x10e <lcd_write_data>
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	f8 01       	movw	r30, r16
 14c:	01 90       	ld	r0, Z+
 14e:	00 20       	and	r0, r0
 150:	e9 f7       	brne	.-6      	; 0x14c <lcd_write_string+0x1e>
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	e0 1b       	sub	r30, r16
 156:	f1 0b       	sbc	r31, r17
 158:	ce 17       	cp	r28, r30
 15a:	df 07       	cpc	r29, r31
 15c:	80 f3       	brcs	.-32     	; 0x13e <lcd_write_string+0x10>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <lcd_write_command>:
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	85 bb       	out	0x15, r24	; 21
 174:	a1 df       	rcall	.-190    	; 0xb8 <lcd_strobe_lcd_e>
 176:	c2 95       	swap	r28
 178:	c0 7f       	andi	r28, 0xF0	; 240
 17a:	c5 bb       	out	0x15, r28	; 21
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	85 bb       	out	0x15, r24	; 21
 182:	9a df       	rcall	.-204    	; 0xb8 <lcd_strobe_lcd_e>
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <init>:
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	a8 df       	rcall	.-176    	; 0xde <init_4bits_mode>
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	eb df       	rcall	.-42     	; 0x168 <lcd_write_command>
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	e9 df       	rcall	.-46     	; 0x168 <lcd_write_command>
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	e7 df       	rcall	.-50     	; 0x168 <lcd_write_command>
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	e5 df       	rcall	.-54     	; 0x168 <lcd_write_command>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	e3 cf       	rjmp	.-58     	; 0x168 <lcd_write_command>
 1a2:	08 95       	ret

000001a4 <display_text>:
 1a4:	c4 cf       	rjmp	.-120    	; 0x12e <lcd_write_string>
 1a6:	08 95       	ret

000001a8 <clear_screen>:

}

void clear_screen(){
	lcd_write_command(0x01);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	de cf       	rjmp	.-68     	; 0x168 <lcd_write_command>
 1ac:	08 95       	ret

000001ae <main>:
#include "LCDmodule.h"
#include <util/delay.h>

int main(void){
	
	init();
 1ae:	ec df       	rcall	.-40     	; 0x188 <init>
	
	
	while(1){
		display_text("Hallooo");
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	f7 df       	rcall	.-18     	; 0x1a4 <display_text>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0xe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x18>
		_delay_ms(1000);
		clear_screen();
 1c6:	00 00       	nop
		display_text("Bla bla");
 1c8:	ef df       	rcall	.-34     	; 0x1a8 <clear_screen>
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	ea df       	rcall	.-44     	; 0x1a4 <display_text>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	89 e6       	ldi	r24, 0x69	; 105
 1d4:	98 e1       	ldi	r25, 0x18	; 24
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0x28>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x32>
		_delay_ms(1000);
		clear_screen();
 1e0:	00 00       	nop
 1e2:	e2 df       	rcall	.-60     	; 0x1a8 <clear_screen>
 1e4:	e5 cf       	rjmp	.-54     	; 0x1b0 <main+0x2>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
