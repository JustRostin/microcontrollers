
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000028a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ee  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d6b  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000515  00000000  00000000  00002241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e6  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	2d d0       	rcall	.+90     	; 0x16a <main>
 110:	ba c0       	rjmp	.+372    	; 0x286 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <BM_init>:
 */ 

#include "BM.h"

void BM_init(void){
	UBRR3 = 8;
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
 11c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	UCSR3B = 0b00010000;
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
	UCSR3C = 0b00001110;
 126:	8e e0       	ldi	r24, 0x0E	; 14
 128:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
 12c:	08 95       	ret

0000012e <BM_handle_data>:
}

void BM_handle_data(void){
	while(!(UCSR3A & (1<<RXC3))){PINA = UCSR3A;};
 12e:	03 c0       	rjmp	.+6      	; 0x136 <BM_handle_data+0x8>
 130:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 134:	80 b9       	out	0x00, r24	; 0
 136:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 13a:	88 23       	and	r24, r24
 13c:	cc f7       	brge	.-14     	; 0x130 <BM_handle_data+0x2>
	unsigned char dummy = UDR3;
 13e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	
	if(dummy == 0b00000001){
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <BM_handle_data+0x1e>
		SD_set_drive_direction(FORWARDS);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	45 c0       	rjmp	.+138    	; 0x1d4 <SD_set_drive_direction>
 14a:	08 95       	ret
	} else if(dummy == 0b00000011){
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	19 f4       	brne	.+6      	; 0x156 <BM_handle_data+0x28>
		SD_set_drive_direction(LEFT);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	40 c0       	rjmp	.+128    	; 0x1d4 <SD_set_drive_direction>
 154:	08 95       	ret
	} else if(dummy == 0b00000111){
 156:	87 30       	cpi	r24, 0x07	; 7
		SD_set_drive_direction(RIGHT);
 158:	19 f4       	brne	.+6      	; 0x160 <BM_handle_data+0x32>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	3b c0       	rjmp	.+118    	; 0x1d4 <SD_set_drive_direction>
 15e:	08 95       	ret
	} else if(dummy == 0b00001111){
 160:	8f 30       	cpi	r24, 0x0F	; 15
		SD_set_drive_direction(STILL);
 162:	11 f4       	brne	.+4      	; 0x168 <BM_handle_data+0x3a>
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	36 c0       	rjmp	.+108    	; 0x1d4 <SD_set_drive_direction>
 168:	08 95       	ret

0000016a <main>:
#include "ServoDriver.h"
#include "BM.h"

int main(void)
{
	SD_init();
 16a:	05 d0       	rcall	.+10     	; 0x176 <SD_init>
	SD_set_drive_direction(STILL);
 16c:	84 e0       	ldi	r24, 0x04	; 4
	BM_init();
 16e:	32 d0       	rcall	.+100    	; 0x1d4 <SD_set_drive_direction>
 170:	d1 df       	rcall	.-94     	; 0x114 <BM_init>
	for(;;){
		BM_handle_data();
 172:	dd df       	rcall	.-70     	; 0x12e <BM_handle_data>
 174:	fe cf       	rjmp	.-4      	; 0x172 <main+0x8>

00000176 <SD_init>:
 176:	8f ef       	ldi	r24, 0xFF	; 255
	
	/*
	* This method will initialize the servo driver
	*/
	void SD_init(void){
		DDRE = 0xFF;
 178:	8d b9       	out	0x0d, r24	; 13
		TCNT3 = 0;
 17a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
 17e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
		TCCR3A = 0b00101001;
 182:	89 e2       	ldi	r24, 0x29	; 41
 184:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		TCCR3B = 0b01010010;
 188:	82 e5       	ldi	r24, 0x52	; 82
 18a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
		OCR3A = 20750;
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	91 e5       	ldi	r25, 0x51	; 81
 192:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 196:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		OCR3B = 1500;
 19a:	8c ed       	ldi	r24, 0xDC	; 220
 19c:	95 e0       	ldi	r25, 0x05	; 5
 19e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 1a2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
		OCR3C = 1500;
 1a6:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
 1aa:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
 1ae:	08 95       	ret

000001b0 <SD_set_speed>:
	*
	* @param	servo is the servo to set the speed
	*			speed is the speed between 2250 and 750
	*/
	void SD_set_speed(int servo, int speed){
		if(servo == LeftServo){
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	29 f4       	brne	.+10     	; 0x1be <SD_set_speed+0xe>
			OCR3B = speed;
 1b4:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 1b8:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <SD_set_speed+0x1a>
		} else if(servo == RightServo){
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	21 f4       	brne	.+8      	; 0x1ca <SD_set_speed+0x1a>
			OCR3C = speed;
 1c2:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
 1c6:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
		}
		TCNT3 = 0;
 1ca:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
 1ce:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
 1d2:	08 95       	ret

000001d4 <SD_set_drive_direction>:
	}
	
	/* 
	* sets the driver to drive a certain direction
	*/
	void SD_set_drive_direction(SD_Direction_t direction){
 1d4:	cf 93       	push	r28
 1d6:	c8 2f       	mov	r28, r24
		if(currentDirection != direction){
 1d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1dc:	8c 17       	cp	r24, r28
 1de:	09 f4       	brne	.+2      	; 0x1e2 <SD_set_drive_direction+0xe>
 1e0:	44 c0       	rjmp	.+136    	; 0x26a <SD_set_drive_direction+0x96>
			switch (direction){
 1e2:	c2 30       	cpi	r28, 0x02	; 2
 1e4:	09 f1       	breq	.+66     	; 0x228 <SD_set_drive_direction+0x54>
 1e6:	28 f4       	brcc	.+10     	; 0x1f2 <SD_set_drive_direction+0x1e>
 1e8:	cc 23       	and	r28, r28
 1ea:	41 f0       	breq	.+16     	; 0x1fc <SD_set_drive_direction+0x28>
 1ec:	c1 30       	cpi	r28, 0x01	; 1
 1ee:	89 f0       	breq	.+34     	; 0x212 <SD_set_drive_direction+0x3e>
 1f0:	46 c0       	rjmp	.+140    	; 0x27e <SD_set_drive_direction+0xaa>
 1f2:	c3 30       	cpi	r28, 0x03	; 3
 1f4:	21 f1       	breq	.+72     	; 0x23e <SD_set_drive_direction+0x6a>
 1f6:	c4 30       	cpi	r28, 0x04	; 4
 1f8:	69 f1       	breq	.+90     	; 0x254 <SD_set_drive_direction+0x80>
 1fa:	41 c0       	rjmp	.+130    	; 0x27e <SD_set_drive_direction+0xaa>
				case FORWARDS:
				SD_set_speed(LeftServo, SDMinSpeed);
 1fc:	60 e2       	ldi	r22, 0x20	; 32
 1fe:	73 e0       	ldi	r23, 0x03	; 3
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	d5 df       	rcall	.-86     	; 0x1b0 <SD_set_speed>
				SD_set_speed(RightServo, SDFullSpeed);
 206:	60 ed       	ldi	r22, 0xD0	; 208
 208:	77 e0       	ldi	r23, 0x07	; 7
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	d0 df       	rcall	.-96     	; 0x1b0 <SD_set_speed>
				break;
 210:	36 c0       	rjmp	.+108    	; 0x27e <SD_set_drive_direction+0xaa>
				case BACKWARDS:
				SD_set_speed(LeftServo, SDFullSpeed);
 212:	60 ed       	ldi	r22, 0xD0	; 208
 214:	77 e0       	ldi	r23, 0x07	; 7
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	ca df       	rcall	.-108    	; 0x1b0 <SD_set_speed>
				SD_set_speed(RightServo, SDMinSpeed);
 21c:	60 e2       	ldi	r22, 0x20	; 32
 21e:	73 e0       	ldi	r23, 0x03	; 3
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c5 df       	rcall	.-118    	; 0x1b0 <SD_set_speed>
				break;
 226:	2b c0       	rjmp	.+86     	; 0x27e <SD_set_drive_direction+0xaa>
				case LEFT:
				SD_set_speed(RightServo, SDZeroSpeed);
 228:	6c ed       	ldi	r22, 0xDC	; 220
 22a:	75 e0       	ldi	r23, 0x05	; 5
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	bf df       	rcall	.-130    	; 0x1b0 <SD_set_speed>
				SD_set_speed(LeftServo, SDTurningFullL);
 232:	6a ea       	ldi	r22, 0xAA	; 170
 234:	75 e0       	ldi	r23, 0x05	; 5
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ba df       	rcall	.-140    	; 0x1b0 <SD_set_speed>
				break;
 23c:	20 c0       	rjmp	.+64     	; 0x27e <SD_set_drive_direction+0xaa>
				case RIGHT:
				SD_set_speed(LeftServo, SDZeroSpeed);
 23e:	6c ed       	ldi	r22, 0xDC	; 220
 240:	75 e0       	ldi	r23, 0x05	; 5
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	b4 df       	rcall	.-152    	; 0x1b0 <SD_set_speed>
				SD_set_speed(RightServo, SDTurningFullR);
 248:	6e e0       	ldi	r22, 0x0E	; 14
 24a:	76 e0       	ldi	r23, 0x06	; 6
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	af df       	rcall	.-162    	; 0x1b0 <SD_set_speed>
				break;
 252:	15 c0       	rjmp	.+42     	; 0x27e <SD_set_drive_direction+0xaa>
				case STILL:
				SD_set_speed(LeftServo, SDZeroSpeed);
 254:	6c ed       	ldi	r22, 0xDC	; 220
 256:	75 e0       	ldi	r23, 0x05	; 5
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	a9 df       	rcall	.-174    	; 0x1b0 <SD_set_speed>
				SD_set_speed(RightServo, SDZeroSpeed);
 25e:	6c ed       	ldi	r22, 0xDC	; 220
 260:	75 e0       	ldi	r23, 0x05	; 5
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	a4 df       	rcall	.-184    	; 0x1b0 <SD_set_speed>
				break;
			}
		} else {
			SD_set_speed(LeftServo, SDZeroSpeed);
 268:	0a c0       	rjmp	.+20     	; 0x27e <SD_set_drive_direction+0xaa>
 26a:	6c ed       	ldi	r22, 0xDC	; 220
 26c:	75 e0       	ldi	r23, 0x05	; 5
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	9e df       	rcall	.-196    	; 0x1b0 <SD_set_speed>
			SD_set_speed(RightServo, SDZeroSpeed);
 274:	6c ed       	ldi	r22, 0xDC	; 220
 276:	75 e0       	ldi	r23, 0x05	; 5
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	99 df       	rcall	.-206    	; 0x1b0 <SD_set_speed>
 27e:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__DATA_REGION_ORIGIN__>
		}
		currentDirection = direction;
 282:	cf 91       	pop	r28
	
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
