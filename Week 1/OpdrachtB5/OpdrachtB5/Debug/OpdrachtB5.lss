
OpdrachtB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000190  00000204  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b83  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000084d  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b4  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008e  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000015c  0000015c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000052  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .data.pattern 00000030  00800100  00000160  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
   8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
   c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  68:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  6c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  7c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  80:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 30       	cpi	r16, 0x01	; 1
  90:	00 01       	movw	r0, r0
  92:	60 00       	.word	0x0060	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

0000015c <__bad_interrupt>:
 15c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000013e <wait>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				util/delay.h
*******************************************************************/
{
	for (int i=0; i<ms; i++) {
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	e9 ef       	ldi	r30, 0xF9	; 249
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <wait+0xa>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <wait+0x10>
 14e:	00 00       	nop
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	28 17       	cp	r18, r24
 156:	39 07       	cpc	r19, r25
 158:	ac f3       	brlt	.-22     	; 0x144 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
 15a:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
	
	};

int main(void)
{
	DDRA = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  f0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  f2:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  f4:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
		int index = 0;
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
		while(pattern[index].delay > 0){
  fa:	14 c0       	rjmp	.+40     	; 0x124 <main+0x38>
			PORTA = pattern[index].state;
  fc:	fe 01       	movw	r30, r28
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	8b bb       	out	0x1b, r24	; 27
			PORTB = pattern[index].state;
 10e:	80 81       	ld	r24, Z
 110:	88 bb       	out	0x18, r24	; 24
			PORTC = pattern[index].state;
 112:	80 81       	ld	r24, Z
 114:	85 bb       	out	0x15, r24	; 21
			PORTD = pattern[index].state;
 116:	80 81       	ld	r24, Z
 118:	82 bb       	out	0x12, r24	; 18
			
			wait(pattern[index].delay);
 11a:	81 81       	ldd	r24, Z+1	; 0x01
 11c:	92 81       	ldd	r25, Z+2	; 0x02
 11e:	0e 94 9f 00 	call	0x13e	; 0x13e <wait>
			index++;
 122:	21 96       	adiw	r28, 0x01	; 1
	DDRC = 0xFF;
	DDRD = 0xFF;
    while(1)
    {
		int index = 0;
		while(pattern[index].delay > 0){
 124:	fe 01       	movw	r30, r28
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	92 81       	ldd	r25, Z+2	; 0x02
 136:	18 16       	cp	r1, r24
 138:	19 06       	cpc	r1, r25
 13a:	04 f3       	brlt	.-64     	; 0xfc <main+0x10>
 13c:	dc cf       	rjmp	.-72     	; 0xf6 <main+0xa>
