
OpdrachtB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000187  0000021b  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000021b  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bbb  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000866  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002fa  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006a  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000182  00000182  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000164  00000164  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.checkForButton 0000003c  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000038  0000012c  0000012c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.released 00000001  00800100  00000186  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss.isBlinkingFast 00000001  00800101  00800101  0000021b  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  74:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  78:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  7c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  80:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  84:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  88:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 01       	movw	r0, r2
  90:	00 01       	movw	r0, r0
  92:	86 01       	movw	r16, r12
  94:	01 01       	movw	r0, r2
  96:	02 80       	ldd	r0, Z+2	; 0x02

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	ec e8       	ldi	r30, 0x8C	; 140
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	19 c0       	rjmp	.+50     	; 0xde <__do_clear_bss+0x8>
  ac:	b7 91       	elpm	r27, Z+
  ae:	a7 91       	elpm	r26, Z+
  b0:	37 91       	elpm	r19, Z+
  b2:	27 91       	elpm	r18, Z+
  b4:	07 91       	elpm	r16, Z+
  b6:	07 fd       	sbrc	r16, 7
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__do_clear_bss>
  ba:	97 91       	elpm	r25, Z+
  bc:	87 91       	elpm	r24, Z+
  be:	ef 01       	movw	r28, r30
  c0:	f9 2f       	mov	r31, r25
  c2:	e8 2f       	mov	r30, r24
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x22>
  d0:	fe 01       	movw	r30, r28
  d2:	1b be       	out	0x3b, r1	; 59
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	e8 39       	cpi	r30, 0x98	; 152
  e0:	f4 07       	cpc	r31, r20
  e2:	21 f7       	brne	.-56     	; 0xac <__do_copy_data+0x8>
  e4:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  e8:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

00000182 <__bad_interrupt>:
 182:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000164 <wait>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				util/delay.h
*******************************************************************/
{
	for (int i=0; i<ms; i++) {
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	08 c0       	rjmp	.+16     	; 0x17a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	ef ec       	ldi	r30, 0xCF	; 207
 16c:	f7 e0       	ldi	r31, 0x07	; 7
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <wait+0xa>
 172:	00 c0       	rjmp	.+0      	; 0x174 <wait+0x10>
 174:	00 00       	nop
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	28 17       	cp	r18, r24
 17c:	39 07       	cpc	r19, r25
 17e:	ac f3       	brlt	.-22     	; 0x16a <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 180:	08 95       	ret

Disassembly of section .text.checkForButton:

000000f0 <checkForButton>:

void checkForButton(){
	if(PINC == 0x00 && released == true){
  f0:	83 b3       	in	r24, 0x13	; 19
  f2:	81 11       	cpse	r24, r1
  f4:	10 c0       	rjmp	.+32     	; 0x116 <checkForButton+0x26>
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	61 f4       	brne	.+24     	; 0x116 <checkForButton+0x26>
		released = false;
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(isBlinkingFast == false){
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isBlinkingFast>
 106:	81 11       	cpse	r24, r1
 108:	04 c0       	rjmp	.+8      	; 0x112 <checkForButton+0x22>
			isBlinkingFast = true;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isBlinkingFast>
 110:	02 c0       	rjmp	.+4      	; 0x116 <checkForButton+0x26>
			} else {
			isBlinkingFast = false;
 112:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isBlinkingFast>
		}
	}
	
	if (PINC == 0x01 && released == false)
 116:	83 b3       	in	r24, 0x13	; 19
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	39 f4       	brne	.+14     	; 0x12a <checkForButton+0x3a>
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	81 11       	cpse	r24, r1
 122:	03 c0       	rjmp	.+6      	; 0x12a <checkForButton+0x3a>
	{
		released = true;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	08 95       	ret

Disassembly of section .text.main:

0000012c <main>:
Boolean released = true;

int main(void)
{
	/* sets the input and output params */
	DDRD = 0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
 130:	14 ba       	out	0x14, r1	; 20
	
    while(1)
    {
		/*turns the light on */
		PORTD = 0x80;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	82 bb       	out	0x12, r24	; 18
		wait(50);
 136:	82 e3       	ldi	r24, 0x32	; 50
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 b2 00 	call	0x164	; 0x164 <wait>
		checkForButton();
 13e:	0e 94 78 00 	call	0xf0	; 0xf0 <__data_load_end>
		PORTD = 0x00;
 142:	12 ba       	out	0x12, r1	; 18
		if(isBlinkingFast == true){
 144:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isBlinkingFast>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	29 f4       	brne	.+10     	; 0x156 <main+0x2a>
			wait(250);
 14c:	8a ef       	ldi	r24, 0xFA	; 250
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 b2 00 	call	0x164	; 0x164 <wait>
 154:	04 c0       	rjmp	.+8      	; 0x15e <main+0x32>
		} else {
			wait(1000);
 156:	88 ee       	ldi	r24, 0xE8	; 232
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	0e 94 b2 00 	call	0x164	; 0x164 <wait>
		}
		checkForButton();
 15e:	0e 94 78 00 	call	0xf0	; 0xf0 <__data_load_end>
		
    }
 162:	e7 cf       	rjmp	.-50     	; 0x132 <main+0x6>
